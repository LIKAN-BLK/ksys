1.  Опишите пожалуйста подходы к адаптации/использованию
Существуют три подхода:
-портирование существующего исходного кода;
-портирование только распространенных библиотек (POSIX C, libstdc++), и использование конечного ПО без модификации;
-адаптация на уровне операционной системы, реализация программного интерфейса в новой ОС подобного тому, который есть уже в существующих операционных системах (wine, позволяющий запускать windows-приложения на linux и mac os x);
-использование виртуальной машины.
2.Продемонстриуйте пожалуйста, на примере любой функции POSIX (кроме time)
(в доп. Файлах)
3. Объясните пожалуйста плюсы и минусы переноса драйвера в usespace
Плюсы:
+Изоляция драйвера от подсистем ядра, следовательно неисправная подсистема ядра не сможет повлиять на работу драйвера.
+Разделение драйверов друг от друга, следовательно неисправный драйвер не сможет повлиять на работу других драйверов
+Неисправный драйвер не сможет вызвать падение ядра ос.
Минусы:
- Понижение производительности из-за переключений контекста.
-Мультиплексирование доступа к устройству, в случае, если его используют несколько приложений.
-Необходим привилегированный доступ к аппаратным ресурсам. 
4.Каким образом обрабатываются прерывания в системе?
Для обработки прерываний требуется привилегированный доступ, которого у процессов в user-space нет. Для обеспечения привилегированного доступа в ядре существует специальный объект – IRQ. Ядро отображает аппаратные IRQ на программный IRQ. В user-space приложение, желающее получать информацию о прерываниях, делает системный вызов l4_irq_attach(). Далее приложение вызывает l4_irq_receive(), т. е. ожидает получения уведомления о прерывании. Так же существует возможность привязки к нескольким IRQ. Сообщения в этом случае получаются при помощи l4_ipc_wait().
5.Каким образом ядро предоставляет доступ пользовательским приложениям к портам ввода-вывода?
Операции in и out непривилегированные. В системе для каждой задачи существует битовая карта, где каждому порту соответствует 1 бит. При обращении к порту приложения из user-space ядро проверяет значение соответствующего бита. Если 0, то доступ разрешается, если 1, то генерируется general protection fault. Модификация данной битовой карты производится при помощи flexpage специального формата.
6.Каким образом память устройств отображаются в пространство драйвера?
Для отображения памяти устройств используется стандартный  MMU процессора (блок управления памятью). Чипсет определяет принадлежит ли запрошенный адрес физическому адресному пространству или устройству. Sigma0 просто получает от ядра dataspace и привязывает его к виртуальному адресному пространству драйвера.
7. Что такое virtual pci buss и каким образом работает?
Virtual pci bus генерируются I/O server. Благодаря virtual pci bus драйвер видит только то устройство, которое он должен обслуживать. 
8. что такое DDE/Linux, DDEkit, что собой представляют, как работают?
DDE – device driver environment. DDE – это прослойка между драйвером и l4, которая реализует для драйвера интерфейс ОС, для которой он был изначально разработан.
DDEkit – ещё один уровень абстракции, предоставляющий распространенный функционал, такой как потоки, синхронизация, обработка прерываний, доступ к портам ввода/вывода. 
9.Каким образом решена проблема множественного доступа к устройствам?
Создается дополнительный слой виртуализации. Каждое приложение использует свой собственный virtual network interface, который уже обращается к реальному сетевому серверу через слой мультиплексирования.  В l4re virtual network interface – вид разделяемой памяти. VNIC  генерирует для каждого приложения виртуальный МАС адрес, который используется приложением для получения/отправки пакетов.
10. что такое паравиртуализация?
Данный подход подразумевает использование виртуальной машины без гипервизора. Вместо этого модифицируется гостевая ОС, то есть все запросы к аппаратному обеспечению заменяются на запросы к операционной системе-хосту. 
11. Как разделены адресные пространства ядра и прикладных программ l4linux?
Прикладные linux-приложения и ядро являются отдельными задачами (l4 task). Передача данных осуществляется при помощи IPC.
12.как работают системные вызовы между прикладными программами и l4linux ядром?
Для каждой прикладной задачи из linux создается обработчик исключений. При системной вызове доставляется соответствующее сообщение от Fiasco к ядру linux.
13.Что такое vCPU? как он реализован?
vCPU – это особый вид потока (thread). Он может работать в режиме пользователя (user mode) и в режиме ядра (kernel mode). В пользовательском режиме задача выполняется на реальном процессоре. Если происходит какое-то событие, затрагивающее аппаратное обеспечение (системный вызов, прерывание, ошибка при работе с памятью), то ядро перемещает vCPU в режим ядра. При этом сохраняется состояние реального процессора. После обработки события поток (vCPU) возвращается в пользовательский режим.






 






